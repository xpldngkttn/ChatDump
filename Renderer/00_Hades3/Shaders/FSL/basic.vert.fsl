/*
 * Copyright (c) 2017-2025 The Forge Interactive Inc.
 *
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

#include "Resources.h.fsl"

STRUCT(VSInput)
{
    DATA(float3, Position, POSITION);
    DATA(float3, Normal, NORMAL);
    DATA(float4, Color, TEXCOORD0);
};

STRUCT(VSOutput)
{
    DATA(float4, Position, SV_Position);
    DATA(float4, Color, COLOR);
};

ROOT_SIGNATURE(DefaultRootSignature)
VSOutput VS_MAIN(VSInput In, SV_InstanceID(uint) InstanceID)
{
    INIT_MAIN;
    VSOutput Out;

#if FT_MULTIVIEW
    float4x4 tempMat = mul(gUniformBlock.mvp[VR_VIEW_ID], gUniformBlock.toWorld[InstanceID]);
#else
    float4x4 tempMat = mul(gUniformBlock.mvp, gUniformBlock.toWorld[InstanceID]);
#endif

    float3 InPosition = In.Position;
    float3 InNormal = In.Normal;
    float3 InColor = In.Color.xyz;

    Out.Position = mul(tempMat, float4(InPosition, 1.0f));

    float4 normal = normalize(mul(gUniformBlock.toWorld[InstanceID], float4(InNormal, 0.0f))); // Assume uniform scaling
    float4 pos = mul(gUniformBlock.toWorld[InstanceID], float4(InPosition, 1.0f));

    float lightIntensity = 1.0f;
    float ambientCoeff = 0.1;

    float3 lightDir;

    if (gUniformBlock.color[InstanceID].w < 0.01) // Special case for Sun, so that it is lit from its top
        lightDir = float3(0.0f, 1.0f, 0.0f);
    else
        lightDir = normalize(gUniformBlock.lightPosition.xyz - pos.xyz);

    float3 baseColor = (gUniformBlock.color[InstanceID].rgb + InColor) / 2.0f;
    float3 blendedColor = (gUniformBlock.lightColor.rgb * baseColor) * lightIntensity;
    float3 diffuse = blendedColor * max(dot(normal.xyz, lightDir), 0.0);
    float3 ambient = baseColor * ambientCoeff;
    Out.Color = float4(diffuse + ambient, 1.0);
    RETURN(Out);
}

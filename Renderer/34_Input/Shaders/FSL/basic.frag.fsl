/*
 * Copyright (c) 2017-2025 The Forge Interactive Inc.
 *
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

#include "../../ButtonDefs.h"

STATIC float projectionScale = 0.05f;

STATIC float2 GamepadTexRes = { 512.0f, 554.0f };
STATIC float2 KeyboardMouseTexRes = { 969.0f, 264.0f };

// Gamepad
STATIC float2 LEFT_STICK_POS = { 0.213f, 0.540f };
STATIC float2 RIGHT_STICK_POS = { 0.577f, 0.688f };
STATIC float2 BUTTON_DPAD_LEFT_POS = { 0.281f, 0.688f };
STATIC float2 BUTTON_DPAD_RIGHT_POS = { 0.379f, 0.688f };
STATIC float2 BUTTON_DPAD_UP_POS = { 0.331f, 0.64f };
STATIC float2 BUTTON_DPAD_DOWN_POS = { 0.331f, 0.74f };
STATIC float2 BUTTON_SOUTH_POS = { 0.709f, 0.605f };
STATIC float2 BUTTON_EAST_POS = { 0.775f, 0.541f };
STATIC float2 BUTTON_WEST_POS = { 0.643f, 0.541f };
STATIC float2 BUTTON_NORTH_POS = { 0.709f, 0.475f };

STATIC float2 BUTTON_L1_POS = { 0.23f, 0.23f };
STATIC float2 BUTTON_R1_POS = { 0.688f, 0.23f };
STATIC float2 BUTTON_L2_POS = { 0.23f, 0.16f };
STATIC float2 BUTTON_R2_POS = { 0.688f, 0.16f };
STATIC float2 BUTTON_L3_POS = LEFT_STICK_POS;
STATIC float2 BUTTON_R3_POS = RIGHT_STICK_POS;

STATIC float2 BUTTON_START_POS = { 0.775f - 0.224f, 0.541f };
STATIC float2 BUTTON_SELECT_POS = { 0.213f + 0.16f, 0.541f };
STATIC float2 BUTTON_HOME_POS = { 0.213f + 0.248f, 0.545f };

// Keyboard+Mouse
STATIC float2 ESCAPE_POS = { 0.1f, 0.07f };
STATIC float2 F1_POS = { 0.25f, 0.07f };
STATIC float2 F2_POS = { 0.4f, 0.07f };
STATIC float2 F3_POS = { 0.55f, 0.07f };
STATIC float2 F4_POS = { 0.7f, 0.07f };
STATIC float2 F5_POS = { 0.85f, 0.07f };
STATIC float2 F6_POS = { 1.f, 0.07f };
STATIC float2 F7_POS = { 1.15f, 0.07f };
STATIC float2 F8_POS = { 1.3f, 0.07f };
STATIC float2 F9_POS = { 1.45f, 0.07f };
STATIC float2 F10_POS = { 1.6f, 0.07f };
STATIC float2 F11_POS = { 1.75f, 0.07f };
STATIC float2 F12_POS = { 1.9f, 0.07f };
STATIC float2 BREAK_POS = { 2.2f, 0.07f };
STATIC float2 INSERT_POS = { 2.35f, 0.07f };
STATIC float2 DEL_POS = { 2.5f, 0.07f };
STATIC float2 NUM_LOCK_POS = { 2.65f, 0.07f };
STATIC float2 KP_MULTIPLY_POS = { 2.95f, 0.07f };

STATIC float2 ACUTE_POS = { 0.1f, 0.2f };
STATIC float2 NUM_1_POS = { ACUTE_POS.x + (0.17f * 1.f), 0.2f };
STATIC float2 NUM_2_POS = { ACUTE_POS.x + (0.17f * 2.f), 0.2f };
STATIC float2 NUM_3_POS = { ACUTE_POS.x + (0.17f * 3.f), 0.2f };
STATIC float2 NUM_4_POS = { ACUTE_POS.x + (0.17f * 4.f), 0.2f };
STATIC float2 NUM_5_POS = { ACUTE_POS.x + (0.17f * 5.f), 0.2f };
STATIC float2 NUM_6_POS = { ACUTE_POS.x + (0.17f * 6.f), 0.2f };
STATIC float2 NUM_7_POS = { ACUTE_POS.x + (0.17f * 7.f), 0.2f };
STATIC float2 NUM_8_POS = { ACUTE_POS.x + (0.17f * 8.f), 0.2f };
STATIC float2 NUM_9_POS = { ACUTE_POS.x + (0.17f * 9.f), 0.2f };
STATIC float2 NUM_0_POS = { ACUTE_POS.x + (0.17f * 10.f), 0.2f };
STATIC float2 MINUS_POS = { ACUTE_POS.x + (0.17f * 11.f), 0.2f };
STATIC float2 EQUAL_POS = { ACUTE_POS.x + (0.17f * 12.f), 0.2f };
STATIC float2 BACK_SPACE_POS = { ACUTE_POS.x + (0.17f * 13.f) + (0.17f * 0.5f), 0.2f };
STATIC float2 KP_ADD_POS = { BACK_SPACE_POS.x + (0.17f * 2.3f), 0.2f };
STATIC float2 KP_SUBTRACT_POS = { KP_ADD_POS.x + 0.155f, 0.2f };

STATIC float2 TAB_POS = { 0.15f, 0.375f };
STATIC float2 Q_POS = { 0.36f, 0.375f };
STATIC float2 W_POS = { Q_POS.x + (0.168f * 1.f), 0.375f };
STATIC float2 E_POS = { Q_POS.x + (0.168f * 2.f), 0.375f };
STATIC float2 R_POS = { Q_POS.x + (0.168f * 3.f), 0.375f };
STATIC float2 T_POS = { Q_POS.x + (0.168f * 4.f), 0.375f };
STATIC float2 Y_POS = { Q_POS.x + (0.168f * 5.f), 0.375f };
STATIC float2 U_POS = { Q_POS.x + (0.168f * 6.f), 0.375f };
STATIC float2 I_POS = { Q_POS.x + (0.168f * 7.f), 0.375f };
STATIC float2 O_POS = { Q_POS.x + (0.168f * 8.f), 0.375f };
STATIC float2 P_POS = { Q_POS.x + (0.168f * 9.f), 0.375f };
STATIC float2 BRACKET_LEFT_POS = { Q_POS.x + (0.168f * 10.f), 0.375f };
STATIC float2 BRACKET_RIGHT_POS = { Q_POS.x + (0.168f * 11.f), 0.375f };
STATIC float2 BACK_SLASH_POS = { Q_POS.x + (0.168f * 12.f) + 0.055f, 0.375f };
STATIC float2 KP_7_HOME_POS = { KP_ADD_POS.x - 0.155f, 0.375f };
STATIC float2 KP_8_UP_POS = { KP_7_HOME_POS.x + 0.155f, 0.375f };
STATIC float2 KP_9_PAGE_UP_POS = { KP_8_UP_POS.x + 0.155f, 0.375f };

STATIC float2 CAPS_LOCK_POS = { 0.168f, 0.544f };
STATIC float2 A_POS = { 0.40f, 0.544f };
STATIC float2 S_POS = { A_POS.x + (0.168f * 1.f), 0.544f };
STATIC float2 D_POS = { A_POS.x + (0.168f * 2.f), 0.544f };
STATIC float2 F_POS = { A_POS.x + (0.168f * 3.f), 0.544f };
STATIC float2 G_POS = { A_POS.x + (0.168f * 4.f), 0.544f };
STATIC float2 H_POS = { A_POS.x + (0.168f * 5.f), 0.544f };
STATIC float2 J_POS = { A_POS.x + (0.168f * 6.f), 0.544f };
STATIC float2 K_POS = { A_POS.x + (0.168f * 7.f), 0.544f };
STATIC float2 L_POS = { A_POS.x + (0.168f * 8.f), 0.544f };
STATIC float2 SEMICOLON_POS = { A_POS.x + (0.168f * 9.f), 0.544f };
STATIC float2 APOSTROPHE_POS = { A_POS.x + (0.168f * 10.f), 0.544f };
STATIC float2 ENTER_POS = { BACK_SLASH_POS.x - 0.084f, 0.544f };
STATIC float2 KP_4_LEFT_POS = { KP_7_HOME_POS.x, 0.544f };
STATIC float2 KP_5_BEGIN_POS = { KP_8_UP_POS.x, 0.544f };
STATIC float2 KP_6_RIGHT_POS = { KP_9_PAGE_UP_POS.x, 0.544f };

STATIC float2 SHIFT_L_POS = { 0.188f, 0.713f };
STATIC float2 Z_POS = { 0.479f, 0.713f };
STATIC float2 X_POS = { Z_POS.x + (0.168f * 1.f), 0.713f };
STATIC float2 C_POS = { Z_POS.x + (0.168f * 2.f), 0.713f };
STATIC float2 V_POS = { Z_POS.x + (0.168f * 3.f), 0.713f };
STATIC float2 B_POS = { Z_POS.x + (0.168f * 4.f), 0.713f };
STATIC float2 N_POS = { Z_POS.x + (0.168f * 5.f), 0.713f };
STATIC float2 M_POS = { Z_POS.x + (0.168f * 6.f), 0.713f };
STATIC float2 COMMA_POS = { Z_POS.x + (0.168f * 7.f), 0.713f };
STATIC float2 PERIOD_POS = { Z_POS.x + (0.168f * 8.f), 0.713f };
STATIC float2 FWRD_SLASH_POS = { Z_POS.x + (0.168f * 9.f), 0.713f };
STATIC float2 SHIFT_R_POS = { ENTER_POS.x - 0.029f, 0.713f };
STATIC float2 KP_1_END_POS = { KP_4_LEFT_POS.x, 0.713f };
STATIC float2 KP_2_DOWN_POS = { KP_5_BEGIN_POS.x, 0.713f };
STATIC float2 KP_3_PAGE_DOWN_POS = { KP_6_RIGHT_POS.x, 0.713f };

STATIC float2 CTRL_L_POS = { ACUTE_POS.x, 0.9f };
STATIC float2 ALT_L_POS = { NUM_3_POS.x, 0.9f };
STATIC float2 SPACE_POS = { NUM_6_POS.x, 0.9f };
STATIC float2 ALT_R_POS = { NUM_9_POS.x, 0.9f };
STATIC float2 CTRL_R_POS = { MINUS_POS.x, 0.9f };
STATIC float2 LEFT_POS = { CTRL_R_POS.x + (0.168f * 1.f), 0.9f + 0.0335f };
STATIC float2 RIGHT_POS = { CTRL_R_POS.x + (0.168f * 3.f), 0.9f + 0.0335f };
STATIC float2 UP_POS = { CTRL_R_POS.x + (0.168f * 2.f), 0.9f - 0.0535f };
STATIC float2 DOWN_POS = { CTRL_R_POS.x + (0.168f * 2.f), 0.9f + 0.0335f };
STATIC float2 KP_0_INSERT_POS = { KP_4_LEFT_POS.x, 0.9f };

STATIC float2 LEFT_CLICK_POS = { 3.23f, 0.25f };
STATIC float2 MID_CLICK_POS = { 3.36f, 0.25f };
STATIC float2 RIGHT_CLICK_POS = { 3.49f, 0.25f };
STATIC float2 SCROLL_UP_POS = { 3.36f, 0.21f };
STATIC float2 SCROLL_DOWN_POS = { 3.36f, 0.29f };


STRUCT(VSOutput)
{
    DATA(float4, Position, SV_Position);
    DATA(float2, TexCoords, TEXCOORD0);
};

STRUCT(InputData)
{
    DATA(float2, wndSize, None);

    DATA(float2, leftAxis, None);
    DATA(float2, rightAxis, None);
    DATA(float2, motionButtons, None);
    DATA(uint, deviceType, None); // 0.Invalid 1.Gamepad 2.Touch 3&4.Keyboard+Mouse
    DATA(uint, buttonSet0, None);
    DATA(uint, buttonSet1, None);
    DATA(uint, buttonSet2, None);
    DATA(uint, buttonSet3, None);
};

#include "Global.srt.h"

float circle(float2 pos, float rad) { return step(rad, length(pos)); }

float4 Gamepad(VSOutput In, float4 Out, float2 uv)
{
    Out.yz *= circle((uv - (LEFT_STICK_POS + gInputData.leftAxis * projectionScale)).xy, 0.01f);
    Out.yz *= circle((uv - (RIGHT_STICK_POS + gInputData.rightAxis * projectionScale)).xy, 0.01f);

    Out.yz *= (gInputData.buttonSet0 & CONTROLLER_DPAD_LEFT_BIT) != 0 ? circle(uv - BUTTON_DPAD_LEFT_POS, 0.02f) : 1.0f;
    Out.yz *= (gInputData.buttonSet0 & CONTROLLER_DPAD_RIGHT_BIT) != 0 ? circle(uv - BUTTON_DPAD_RIGHT_POS, 0.02f) : 1.0f;
    Out.yz *= (gInputData.buttonSet0 & CONTROLLER_DPAD_UP_BIT) != 0 ? circle(uv - BUTTON_DPAD_UP_POS, 0.02f) : 1.0f;
    Out.yz *= (gInputData.buttonSet0 & CONTROLLER_DPAD_DOWN_BIT) != 0 ? circle(uv - BUTTON_DPAD_DOWN_POS, 0.02f) : 1.0f;
    Out.yz *= (gInputData.buttonSet0 & CONTROLLER_A_BIT) != 0 ? circle(uv - BUTTON_SOUTH_POS, 0.03f) : 1.0f;
    Out.yz *= (gInputData.buttonSet0 & CONTROLLER_B_BIT) != 0 ? circle(uv - BUTTON_EAST_POS, 0.03f) : 1.0f;
    Out.yz *= (gInputData.buttonSet0 & CONTROLLER_X_BIT) != 0 ? circle(uv - BUTTON_WEST_POS, 0.03f) : 1.0f;
    Out.yz *= (gInputData.buttonSet0 & CONTROLLER_Y_BIT) != 0 ? circle(uv - BUTTON_NORTH_POS, 0.03f) : 1.0f;

    Out.yz *= (gInputData.buttonSet0 & CONTROLLER_L1_BIT) != 0 ? circle(uv - BUTTON_L1_POS, 0.02f) : 1.0f;
    Out.yz *= (gInputData.buttonSet0 & CONTROLLER_R1_BIT) != 0 ? circle(uv - BUTTON_R1_POS, 0.02f) : 1.0f;
    Out.yz *= circle(uv - BUTTON_L2_POS + float2(0.0f, gInputData.motionButtons.x * projectionScale), 0.02f);
    Out.yz *= circle(uv - BUTTON_R2_POS + float2(0.0f, gInputData.motionButtons.y * projectionScale), 0.02f);
    Out.yz *= (gInputData.buttonSet0 & CONTROLLER_L3_BIT) != 0 ? circle(uv - BUTTON_L3_POS, 0.03f) : 1.0f;
    Out.yz *= (gInputData.buttonSet0 & CONTROLLER_R3_BIT) != 0 ? circle(uv - BUTTON_R3_POS, 0.03f) : 1.0f;

    Out.yz *= (gInputData.buttonSet0 & CONTROLLER_START_BIT) != 0 ? circle(uv - BUTTON_START_POS, 0.01f) : 1.0f;
    Out.yz *= (gInputData.buttonSet0 & CONTROLLER_SELECT_BIT) != 0 ? circle(uv - BUTTON_SELECT_POS, 0.01f) : 1.0f;
    Out.yz *= (gInputData.buttonSet0 & CONTROLLER_HOME_BIT) != 0 ? circle(uv - BUTTON_HOME_POS, 0.03f) : 1.0f;

    return Out;
}

float4 Touch(VSOutput In, float4 Out, float2 uv) { return Out; }

float4 KeyboardMouse(VSOutput In, float4 Out, float2 uv)
{
    float circleRadius = 0.02f;

    Out.yz *= (gInputData.buttonSet0 & ESCAPE_BIT) != 0 ? circle(uv - ESCAPE_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet0 & F1_BIT) != 0 ? circle(uv - F1_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet0 & F2_BIT) != 0 ? circle(uv - F2_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet0 & F3_BIT) != 0 ? circle(uv - F3_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet0 & F4_BIT) != 0 ? circle(uv - F4_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet0 & F5_BIT) != 0 ? circle(uv - F5_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet0 & F6_BIT) != 0 ? circle(uv - F6_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet0 & F7_BIT) != 0 ? circle(uv - F7_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet0 & F8_BIT) != 0 ? circle(uv - F8_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet0 & F9_BIT) != 0 ? circle(uv - F9_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet0 & F10_BIT) != 0 ? circle(uv - F10_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet0 & F11_BIT) != 0 ? circle(uv - F11_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet0 & F12_BIT) != 0 ? circle(uv - F12_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet0 & BREAK_BIT) != 0 ? circle(uv - BREAK_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet0 & INSERT_BIT) != 0 ? circle(uv - INSERT_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet0 & DEL_BIT) != 0 ? circle(uv - DEL_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet0 & NUM_LOCK_BIT) != 0 ? circle(uv - NUM_LOCK_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet0 & KP_MULTIPLY_BIT) != 0 ? circle(uv - KP_MULTIPLY_POS, circleRadius) : 1.0f;

    Out.yz *= (gInputData.buttonSet0 & ACUTE_BIT) != 0 ? circle(uv - ACUTE_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet0 & NUM_1_BIT) != 0 ? circle(uv - NUM_1_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet0 & NUM_2_BIT) != 0 ? circle(uv - NUM_2_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet0 & NUM_3_BIT) != 0 ? circle(uv - NUM_3_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet0 & NUM_4_BIT) != 0 ? circle(uv - NUM_4_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet0 & NUM_5_BIT) != 0 ? circle(uv - NUM_5_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet0 & NUM_6_BIT) != 0 ? circle(uv - NUM_6_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet0 & NUM_7_BIT) != 0 ? circle(uv - NUM_7_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet0 & NUM_8_BIT) != 0 ? circle(uv - NUM_8_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet0 & NUM_9_BIT) != 0 ? circle(uv - NUM_9_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet0 & NUM_0_BIT) != 0 ? circle(uv - NUM_0_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet0 & MINUS_BIT) != 0 ? circle(uv - MINUS_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet0 & EQUAL_BIT) != 0 ? circle(uv - EQUAL_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet0 & BACK_SPACE_BIT) != 0 ? circle(uv - BACK_SPACE_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet1 & KP_ADD_BIT) != 0 ? circle(uv - KP_ADD_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet1 & KP_SUBTRACT_BIT) != 0 ? circle(uv - KP_SUBTRACT_POS, circleRadius) : 1.0f;

    Out.yz *= (gInputData.buttonSet1 & TAB_BIT) != 0 ? circle(uv - TAB_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet1 & Q_BIT) != 0 ? circle(uv - Q_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet1 & W_BIT) != 0 ? circle(uv - W_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet1 & E_BIT) != 0 ? circle(uv - E_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet1 & R_BIT) != 0 ? circle(uv - R_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet1 & T_BIT) != 0 ? circle(uv - T_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet1 & Y_BIT) != 0 ? circle(uv - Y_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet1 & U_BIT) != 0 ? circle(uv - U_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet1 & I_BIT) != 0 ? circle(uv - I_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet1 & O_BIT) != 0 ? circle(uv - O_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet1 & P_BIT) != 0 ? circle(uv - P_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet1 & BRACKET_LEFT_BIT) != 0 ? circle(uv - BRACKET_LEFT_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet1 & BRACKET_RIGHT_BIT) != 0 ? circle(uv - BRACKET_RIGHT_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet1 & BACK_SLASH_BIT) != 0 ? circle(uv - BACK_SLASH_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet1 & KP_7_HOME_BIT) != 0 ? circle(uv - KP_7_HOME_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet1 & KP_8_UP_BIT) != 0 ? circle(uv - KP_8_UP_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet1 & KP_9_PAGE_UP_BIT) != 0 ? circle(uv - KP_9_PAGE_UP_POS, circleRadius) : 1.0f;

    Out.yz *= (gInputData.buttonSet1 & CAPS_LOCK_BIT) != 0 ? circle(uv - CAPS_LOCK_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet1 & A_BIT) != 0 ? circle(uv - A_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet1 & S_BIT) != 0 ? circle(uv - S_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet1 & D_BIT) != 0 ? circle(uv - D_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet1 & F_BIT) != 0 ? circle(uv - F_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet1 & G_BIT) != 0 ? circle(uv - G_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet1 & H_BIT) != 0 ? circle(uv - H_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet1 & J_BIT) != 0 ? circle(uv - J_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet1 & K_BIT) != 0 ? circle(uv - K_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet1 & L_BIT) != 0 ? circle(uv - L_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet1 & SEMICOLON_BIT) != 0 ? circle(uv - SEMICOLON_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet1 & APOSTROPHE_BIT) != 0 ? circle(uv - APOSTROPHE_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet1 & ENTER_BIT) != 0 ? circle(uv - ENTER_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet2 & KP_4_LEFT_BIT) != 0 ? circle(uv - KP_4_LEFT_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet2 & KP_5_BEGIN_BIT) != 0 ? circle(uv - KP_5_BEGIN_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet2 & KP_6_RIGHT_BIT) != 0 ? circle(uv - KP_6_RIGHT_POS, circleRadius) : 1.0f;

    Out.yz *= (gInputData.buttonSet2 & SHIFT_L_BIT) != 0 ? circle(uv - SHIFT_L_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet2 & Z_BIT) != 0 ? circle(uv - Z_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet2 & X_BIT) != 0 ? circle(uv - X_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet2 & C_BIT) != 0 ? circle(uv - C_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet2 & V_BIT) != 0 ? circle(uv - V_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet2 & B_BIT) != 0 ? circle(uv - B_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet2 & N_BIT) != 0 ? circle(uv - N_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet2 & M_BIT) != 0 ? circle(uv - M_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet2 & COMMA_BIT) != 0 ? circle(uv - COMMA_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet2 & PERIOD_BIT) != 0 ? circle(uv - PERIOD_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet2 & FWRD_SLASH_BIT) != 0 ? circle(uv - FWRD_SLASH_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet2 & SHIFT_R_BIT) != 0 ? circle(uv - SHIFT_R_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet2 & KP_1_END_BIT) != 0 ? circle(uv - KP_1_END_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet2 & KP_2_DOWN_BIT) != 0 ? circle(uv - KP_2_DOWN_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet2 & KP_3_PAGE_DOWN_BIT) != 0 ? circle(uv - KP_3_PAGE_DOWN_POS, circleRadius) : 1.0f;

    Out.yz *= (gInputData.buttonSet2 & CTRL_L_BIT) != 0 ? circle(uv - CTRL_L_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet2 & ALT_L_BIT) != 0 ? circle(uv - ALT_L_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet2 & SPACE_BIT) != 0 ? circle(uv - SPACE_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet2 & ALT_R_BIT) != 0 ? circle(uv - ALT_R_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet2 & CTRL_R_BIT) != 0 ? circle(uv - CTRL_R_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet2 & LEFT_BIT) != 0 ? circle(uv - LEFT_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet2 & RIGHT_BIT) != 0 ? circle(uv - RIGHT_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet2 & UP_BIT) != 0 ? circle(uv - UP_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet2 & DOWN_BIT) != 0 ? circle(uv - DOWN_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet2 & KP_0_INSERT_BIT) != 0 ? circle(uv - KP_0_INSERT_POS, circleRadius) : 1.0f;

    Out.yz *= (gInputData.buttonSet2 & LEFT_CLICK_BIT) != 0 ? circle(uv - LEFT_CLICK_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet2 & MID_CLICK_BIT) != 0 ? circle(uv - MID_CLICK_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet2 & RIGHT_CLICK_BIT) != 0 ? circle(uv - RIGHT_CLICK_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet2 & SCROLL_UP_BIT) != 0 ? circle(uv - SCROLL_UP_POS, circleRadius) : 1.0f;
    Out.yz *= (gInputData.buttonSet3 & SCROLL_DOWN_BIT) != 0 ? circle(uv - SCROLL_DOWN_POS, circleRadius) : 1.0f;

    return Out;
}
ROOT_SIGNATURE(DefaultRootSignature)
float4 PS_MAIN(VSOutput In)
{
    INIT_MAIN;

    float4 Out = { 0.5f, 0.5f, 0.5f, 0.5f };
    float2 uv = In.TexCoords;

    uint dt = gInputData.deviceType;
    if (dt == INPUT_DEVICE_GAMEPAD)
    {
        float2 adjustment = float2(min((gInputData.wndSize.y / gInputData.wndSize.x) * (GamepadTexRes.x / GamepadTexRes.y), 1.0f),
                                   min((gInputData.wndSize.x / gInputData.wndSize.y) * (GamepadTexRes.y / GamepadTexRes.x), 1.0f));

        uv -= (1.0f - adjustment) * 0.5f;
        uv /= adjustment;

        Out = SampleTex2D(gTexture, gSamplerTrilinearBorder, uv);
        uv /= float2(GamepadTexRes.y / GamepadTexRes.x, 1.0f);
        Out = Gamepad(In, Out, uv);
    }
    else if (dt == INPUT_DEVICE_TOUCH)
    {
        Out = Touch(In, Out, uv);
    }
    else if (dt == INPUT_DEVICE_KBM)
    {
        float2 adjustment =
            float2(min((gInputData.wndSize.y / gInputData.wndSize.x) * (KeyboardMouseTexRes.x / KeyboardMouseTexRes.y), 1.0f),
                   min((gInputData.wndSize.x / gInputData.wndSize.y) * (KeyboardMouseTexRes.y / KeyboardMouseTexRes.x), 1.0f));

        uv -= (1.0f - adjustment) * 0.5f;
        uv /= adjustment;

        Out = SampleTex2D(gTexture, gSamplerTrilinearBorder, uv);
        uv /= float2(KeyboardMouseTexRes.y / KeyboardMouseTexRes.x, 1.0f);
        Out = KeyboardMouse(In, Out, uv);
    }

    RETURN(Out);
}
